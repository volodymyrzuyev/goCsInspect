// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package custSql

import (
	"context"
	"database/sql"
)

const getItem = `-- name: GetItem :one
SELECT
accountid, itemid, defindex, paintindex, rarity, quality, paintwear, paintseed, killeaterscoretype, killeatervalue, customname, inventory, origin, questid, dropreason, musicindex, entindex, petindex, paramd, paramm, params, floatvalue, maxfloat, minfloat, weapontype, itemname, rarityname, qualityname, originname, wearname, markethashname, lastupdated
FROM items
WHERE ItemID = ?
`

func (q *Queries) GetItem(ctx context.Context, itemid int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, itemid)
	var i Item
	err := row.Scan(
		&i.Accountid,
		&i.Itemid,
		&i.Defindex,
		&i.Paintindex,
		&i.Rarity,
		&i.Quality,
		&i.Paintwear,
		&i.Paintseed,
		&i.Killeaterscoretype,
		&i.Killeatervalue,
		&i.Customname,
		&i.Inventory,
		&i.Origin,
		&i.Questid,
		&i.Dropreason,
		&i.Musicindex,
		&i.Entindex,
		&i.Petindex,
		&i.Paramd,
		&i.Paramm,
		&i.Params,
		&i.Floatvalue,
		&i.Maxfloat,
		&i.Minfloat,
		&i.Weapontype,
		&i.Itemname,
		&i.Rarityname,
		&i.Qualityname,
		&i.Originname,
		&i.Wearname,
		&i.Markethashname,
		&i.Lastupdated,
	)
	return i, err
}

const getModifiers = `-- name: GetModifiers :many
SELECT
itemid, modifierid, modifiertype, slot, wear, scale, rotation, tintid, offsetx, offsety, offsetz, pattern, markethashname
FROM Modifiers
WHERE ItemID = ?
`

func (q *Queries) GetModifiers(ctx context.Context, itemid int64) ([]Modifier, error) {
	rows, err := q.db.QueryContext(ctx, getModifiers, itemid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Modifier
	for rows.Next() {
		var i Modifier
		if err := rows.Scan(
			&i.Itemid,
			&i.Modifierid,
			&i.Modifiertype,
			&i.Slot,
			&i.Wear,
			&i.Scale,
			&i.Rotation,
			&i.Tintid,
			&i.Offsetx,
			&i.Offsety,
			&i.Offsetz,
			&i.Pattern,
			&i.Markethashname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertItem = `-- name: InsertItem :exec
INSERT INTO items (
    AccountID,
    ItemID,
    DefIndex,
    PaintIndex,
    Rarity,
    Quality,
    Paintwear,
    Paintseed,
    Killeaterscoretype,
    Killeatervalue,
    Customname,
    Inventory,
    Origin,
    Questid,
    Dropreason,
    Musicindex,
    Entindex,
    Petindex,
    ParamD,
    ParamM,
    ParamS,
    FloatValue,
    MaxFloat,
    MinFloat,
    WeaponType,
    ItemName,
    RarityName,
    QualityName,
    OriginName,
    WearName,
    MarketHashName,
    LastUpdated
) VALUES (
    ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16,
    ?17, ?18, ?19, ?20, ?21, ?22, ?23, ?24, ?25, ?26, ?27, ?28, ?29, ?30, ?31,
    ?32
)
`

type InsertItemParams struct {
	Accountid          sql.NullInt64
	Itemid             int64
	Defindex           sql.NullInt64
	Paintindex         sql.NullInt64
	Rarity             sql.NullInt64
	Quality            sql.NullInt64
	Paintwear          sql.NullInt64
	Paintseed          sql.NullInt64
	Killeaterscoretype sql.NullInt64
	Killeatervalue     sql.NullInt64
	Customname         sql.NullString
	Inventory          sql.NullInt64
	Origin             sql.NullInt64
	Questid            sql.NullInt64
	Dropreason         sql.NullInt64
	Musicindex         sql.NullInt64
	Entindex           sql.NullInt64
	Petindex           sql.NullInt64
	Paramd             sql.NullInt64
	Paramm             sql.NullInt64
	Params             sql.NullInt64
	Floatvalue         sql.NullFloat64
	Maxfloat           sql.NullFloat64
	Minfloat           sql.NullFloat64
	Weapontype         sql.NullString
	Itemname           sql.NullString
	Rarityname         sql.NullString
	Qualityname        sql.NullString
	Originname         sql.NullString
	Wearname           sql.NullString
	Markethashname     sql.NullString
	Lastupdated        sql.NullInt64
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) error {
	_, err := q.db.ExecContext(ctx, insertItem,
		arg.Accountid,
		arg.Itemid,
		arg.Defindex,
		arg.Paintindex,
		arg.Rarity,
		arg.Quality,
		arg.Paintwear,
		arg.Paintseed,
		arg.Killeaterscoretype,
		arg.Killeatervalue,
		arg.Customname,
		arg.Inventory,
		arg.Origin,
		arg.Questid,
		arg.Dropreason,
		arg.Musicindex,
		arg.Entindex,
		arg.Petindex,
		arg.Paramd,
		arg.Paramm,
		arg.Params,
		arg.Floatvalue,
		arg.Maxfloat,
		arg.Minfloat,
		arg.Weapontype,
		arg.Itemname,
		arg.Rarityname,
		arg.Qualityname,
		arg.Originname,
		arg.Wearname,
		arg.Markethashname,
		arg.Lastupdated,
	)
	return err
}

const insertModifier = `-- name: InsertModifier :exec
INSERT INTO Modifiers(
	ItemID,
	ModifierID,
	ModifierType,
	Slot,
	Wear,
	Scale,
	Rotation,
	TintId,
	OffsetX,
	OffsetY,
	OffsetZ,
	Pattern,
	MarketHashName
)
VALUES ( 
	?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13
)
`

type InsertModifierParams struct {
	Itemid         int64
	Modifierid     sql.NullInt64
	Modifiertype   string
	Slot           sql.NullInt64
	Wear           sql.NullFloat64
	Scale          sql.NullFloat64
	Rotation       sql.NullFloat64
	Tintid         sql.NullInt64
	Offsetx        sql.NullFloat64
	Offsety        sql.NullFloat64
	Offsetz        sql.NullFloat64
	Pattern        sql.NullInt64
	Markethashname sql.NullString
}

func (q *Queries) InsertModifier(ctx context.Context, arg InsertModifierParams) error {
	_, err := q.db.ExecContext(ctx, insertModifier,
		arg.Itemid,
		arg.Modifierid,
		arg.Modifiertype,
		arg.Slot,
		arg.Wear,
		arg.Scale,
		arg.Rotation,
		arg.Tintid,
		arg.Offsetx,
		arg.Offsety,
		arg.Offsetz,
		arg.Pattern,
		arg.Markethashname,
	)
	return err
}
