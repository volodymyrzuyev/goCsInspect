// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getChains = `-- name: GetChains :many
SELECT mods.modid, mods.slot, mods.stickerid, mods.wear, mods.scale, mods.rotation, mods.tintid, mods.offsetx, mods.offsety, mods.offsetz, mods.pattern, mods.highlightreel FROM mods, modsChains s WHERE 
    s.M = ?1
    AND s.D = ?2
    AND s.S = ?3
    AND s.Itemid = ?4
    AND mods.Modid = s.Modid
    ORDER BY Modid
`

type GetChainsParams struct {
	M      string
	D      string
	S      string
	Itemid string
}

func (q *Queries) GetChains(ctx context.Context, arg GetChainsParams) ([]Mod, error) {
	rows, err := q.db.QueryContext(ctx, getChains,
		arg.M,
		arg.D,
		arg.S,
		arg.Itemid,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mod
	for rows.Next() {
		var i Mod
		if err := rows.Scan(
			&i.Modid,
			&i.Slot,
			&i.Stickerid,
			&i.Wear,
			&i.Scale,
			&i.Rotation,
			&i.Tintid,
			&i.Offsetx,
			&i.Offsety,
			&i.Offsetz,
			&i.Pattern,
			&i.Highlightreel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItem = `-- name: GetItem :one
SELECT m, d, s, accountid, itemid, defindex, paintindex, rarity, quality, paintwear, paintseed, killeaterscoretype, killeatervalue, customname, inventory, origin, questid, dropreason, musicindex, entindex, petindex FROM items WHERE
    M = ?1
    AND D = ?2
    AND S = ?3
    AND Itemid = ?4
`

type GetItemParams struct {
	M      string
	D      string
	S      string
	Itemid string
}

func (q *Queries) GetItem(ctx context.Context, arg GetItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem,
		arg.M,
		arg.D,
		arg.S,
		arg.Itemid,
	)
	var i Item
	err := row.Scan(
		&i.M,
		&i.D,
		&i.S,
		&i.Accountid,
		&i.Itemid,
		&i.Defindex,
		&i.Paintindex,
		&i.Rarity,
		&i.Quality,
		&i.Paintwear,
		&i.Paintseed,
		&i.Killeaterscoretype,
		&i.Killeatervalue,
		&i.Customname,
		&i.Inventory,
		&i.Origin,
		&i.Questid,
		&i.Dropreason,
		&i.Musicindex,
		&i.Entindex,
		&i.Petindex,
	)
	return i, err
}

const getStickers = `-- name: GetStickers :many
SELECT mods.modid, mods.slot, mods.stickerid, mods.wear, mods.scale, mods.rotation, mods.tintid, mods.offsetx, mods.offsety, mods.offsetz, mods.pattern, mods.highlightreel FROM mods, modsStickers s WHERE 
    s.M = ?1
    AND s.D = ?2
    AND s.S = ?3
    AND s.Itemid = ?4
    AND mods.Modid = s.Modid
    ORDER BY Modid
`

type GetStickersParams struct {
	M      string
	D      string
	S      string
	Itemid string
}

func (q *Queries) GetStickers(ctx context.Context, arg GetStickersParams) ([]Mod, error) {
	rows, err := q.db.QueryContext(ctx, getStickers,
		arg.M,
		arg.D,
		arg.S,
		arg.Itemid,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mod
	for rows.Next() {
		var i Mod
		if err := rows.Scan(
			&i.Modid,
			&i.Slot,
			&i.Stickerid,
			&i.Wear,
			&i.Scale,
			&i.Rotation,
			&i.Tintid,
			&i.Offsetx,
			&i.Offsety,
			&i.Offsetz,
			&i.Pattern,
			&i.Highlightreel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertItem = `-- name: InsertItem :exec
INSERT INTO items (
    M,
    D,
    S,
    Accountid,
    Itemid,
    Defindex,
    Paintindex,
    Rarity,
    Quality,
    Paintwear,
    Paintseed,
    Killeaterscoretype,
    Killeatervalue,
    Customname,
    Inventory,
    Origin,
    Questid,
    Dropreason,
    Musicindex,
    Entindex,
    Petindex
)
VALUES (
    ?1, 
    ?2, 
    ?3, 
    ?4, 
    ?5, 
    ?6, 
    ?7, 
    ?8, 
    ?9, 
    ?10, 
    ?11, 
    ?12, 
    ?13, 
    ?14, 
    ?15, 
    ?16,
    ?17, 
    ?18, 
    ?19, 
    ?20, 
    ?21
)
`

type InsertItemParams struct {
	M                  string
	D                  string
	S                  string
	Accountid          sql.NullInt64
	Itemid             string
	Defindex           sql.NullInt64
	Paintindex         sql.NullInt64
	Rarity             sql.NullInt64
	Quality            sql.NullInt64
	Paintwear          sql.NullInt64
	Paintseed          sql.NullInt64
	Killeaterscoretype sql.NullInt64
	Killeatervalue     sql.NullInt64
	Customname         sql.NullString
	Inventory          sql.NullInt64
	Origin             sql.NullInt64
	Questid            sql.NullInt64
	Dropreason         sql.NullInt64
	Musicindex         sql.NullInt64
	Entindex           sql.NullInt64
	Petindex           sql.NullInt64
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) error {
	_, err := q.db.ExecContext(ctx, insertItem,
		arg.M,
		arg.D,
		arg.S,
		arg.Accountid,
		arg.Itemid,
		arg.Defindex,
		arg.Paintindex,
		arg.Rarity,
		arg.Quality,
		arg.Paintwear,
		arg.Paintseed,
		arg.Killeaterscoretype,
		arg.Killeatervalue,
		arg.Customname,
		arg.Inventory,
		arg.Origin,
		arg.Questid,
		arg.Dropreason,
		arg.Musicindex,
		arg.Entindex,
		arg.Petindex,
	)
	return err
}

const insertMod = `-- name: InsertMod :one
INSERT INTO mods (
    Slot,
    StickerId,
    Wear,
    Scale,
    Rotation,
    TintId,
    OffsetX,
    OffsetY,
    OffsetZ,
    Pattern,
    HighlightReel
)
VALUES (
    ?1, 
    ?2, 
    ?3, 
    ?4, 
    ?5, 
    ?6, 
    ?7, 
    ?8, 
    ?9, 
    ?10, 
    ?11
) 
RETURNING Modid
`

type InsertModParams struct {
	Slot          sql.NullInt64
	Stickerid     sql.NullInt64
	Wear          sql.NullFloat64
	Scale         sql.NullFloat64
	Rotation      sql.NullFloat64
	Tintid        sql.NullInt64
	Offsetx       sql.NullFloat64
	Offsety       sql.NullFloat64
	Offsetz       sql.NullFloat64
	Pattern       sql.NullInt64
	Highlightreel sql.NullInt64
}

func (q *Queries) InsertMod(ctx context.Context, arg InsertModParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertMod,
		arg.Slot,
		arg.Stickerid,
		arg.Wear,
		arg.Scale,
		arg.Rotation,
		arg.Tintid,
		arg.Offsetx,
		arg.Offsety,
		arg.Offsetz,
		arg.Pattern,
		arg.Highlightreel,
	)
	var modid int64
	err := row.Scan(&modid)
	return modid, err
}

const insertModChain = `-- name: InsertModChain :exec
INSERT INTO modsChains (
  Modid,
  M,
  D,
  S,
  Itemid
)
VALUES (
    ?1, 
    ?2, 
    ?3, 
    ?4, 
    ?5
)
`

type InsertModChainParams struct {
	Modid  int64
	M      string
	D      string
	S      string
	Itemid string
}

func (q *Queries) InsertModChain(ctx context.Context, arg InsertModChainParams) error {
	_, err := q.db.ExecContext(ctx, insertModChain,
		arg.Modid,
		arg.M,
		arg.D,
		arg.S,
		arg.Itemid,
	)
	return err
}

const insertModSticker = `-- name: InsertModSticker :exec
INSERT INTO modsStickers (
  Modid,
  M,
  D,
  S,
  Itemid
)
VALUES (
    ?1, 
    ?2, 
    ?3, 
    ?4, 
    ?5
)
`

type InsertModStickerParams struct {
	Modid  int64
	M      string
	D      string
	S      string
	Itemid string
}

func (q *Queries) InsertModSticker(ctx context.Context, arg InsertModStickerParams) error {
	_, err := q.db.ExecContext(ctx, insertModSticker,
		arg.Modid,
		arg.M,
		arg.D,
		arg.S,
		arg.Itemid,
	)
	return err
}
